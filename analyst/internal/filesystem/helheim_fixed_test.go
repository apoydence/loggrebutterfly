// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package filesystem_test

import (
	talaria "github.com/apoydence/talaria/api/v1"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

type mockSchedulerClient struct {
	CreateCalled chan bool
	CreateInput  struct {
		Ctx  chan context.Context
		In   chan *talaria.CreateInfo
		Opts chan []grpc.CallOption
	}
	CreateOutput struct {
		Ret0 chan *talaria.CreateResponse
		Ret1 chan error
	}
	ListClusterInfoCalled chan bool
	ListClusterInfoInput  struct {
		Ctx  chan context.Context
		In   chan *talaria.ListInfo
		Opts chan []grpc.CallOption
	}
	ListClusterInfoOutput struct {
		Ret0 chan *talaria.ListResponse
		Ret1 chan error
	}
}

func newMockSchedulerClient() *mockSchedulerClient {
	m := &mockSchedulerClient{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Ctx = make(chan context.Context, 100)
	m.CreateInput.In = make(chan *talaria.CreateInfo, 100)
	m.CreateInput.Opts = make(chan []grpc.CallOption, 100)
	m.CreateOutput.Ret0 = make(chan *talaria.CreateResponse, 100)
	m.CreateOutput.Ret1 = make(chan error, 100)
	m.ListClusterInfoCalled = make(chan bool, 100)
	m.ListClusterInfoInput.Ctx = make(chan context.Context, 100)
	m.ListClusterInfoInput.In = make(chan *talaria.ListInfo, 100)
	m.ListClusterInfoInput.Opts = make(chan []grpc.CallOption, 100)
	m.ListClusterInfoOutput.Ret0 = make(chan *talaria.ListResponse, 100)
	m.ListClusterInfoOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockSchedulerClient) Create(ctx context.Context, in *talaria.CreateInfo, opts ...grpc.CallOption) (*talaria.CreateResponse, error) {
	m.CreateCalled <- true
	m.CreateInput.Ctx <- ctx
	m.CreateInput.In <- in
	m.CreateInput.Opts <- opts
	return <-m.CreateOutput.Ret0, <-m.CreateOutput.Ret1
}
func (m *mockSchedulerClient) ListClusterInfo(ctx context.Context, in *talaria.ListInfo, opts ...grpc.CallOption) (*talaria.ListResponse, error) {
	m.ListClusterInfoCalled <- true
	m.ListClusterInfoInput.Ctx <- ctx
	m.ListClusterInfoInput.In <- in
	m.ListClusterInfoInput.Opts <- opts
	return <-m.ListClusterInfoOutput.Ret0, <-m.ListClusterInfoOutput.Ret1
}

type mockNodeClient struct {
	WriteCalled chan bool
	WriteInput  struct {
		Ctx  chan context.Context
		Opts chan []grpc.CallOption
	}
	WriteOutput struct {
		Ret0 chan talaria.Node_WriteClient
		Ret1 chan error
	}
	ReadCalled chan bool
	ReadInput  struct {
		Ctx  chan context.Context
		In   chan *talaria.BufferInfo
		Opts chan []grpc.CallOption
	}
	ReadOutput struct {
		Ret0 chan talaria.Node_ReadClient
		Ret1 chan error
	}
	ListClustersCalled chan bool
	ListClustersInput  struct {
		Ctx  chan context.Context
		In   chan *talaria.ListClustersInfo
		Opts chan []grpc.CallOption
	}
	ListClustersOutput struct {
		Ret0 chan *talaria.ListClustersResponse
		Ret1 chan error
	}
}

func newMockNodeClient() *mockNodeClient {
	m := &mockNodeClient{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Ctx = make(chan context.Context, 100)
	m.WriteInput.Opts = make(chan []grpc.CallOption, 100)
	m.WriteOutput.Ret0 = make(chan talaria.Node_WriteClient, 100)
	m.WriteOutput.Ret1 = make(chan error, 100)
	m.ReadCalled = make(chan bool, 100)
	m.ReadInput.Ctx = make(chan context.Context, 100)
	m.ReadInput.In = make(chan *talaria.BufferInfo, 100)
	m.ReadInput.Opts = make(chan []grpc.CallOption, 100)
	m.ReadOutput.Ret0 = make(chan talaria.Node_ReadClient, 100)
	m.ReadOutput.Ret1 = make(chan error, 100)
	m.ListClustersCalled = make(chan bool, 100)
	m.ListClustersInput.Ctx = make(chan context.Context, 100)
	m.ListClustersInput.In = make(chan *talaria.ListClustersInfo, 100)
	m.ListClustersInput.Opts = make(chan []grpc.CallOption, 100)
	m.ListClustersOutput.Ret0 = make(chan *talaria.ListClustersResponse, 100)
	m.ListClustersOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockNodeClient) Write(ctx context.Context, opts ...grpc.CallOption) (talaria.Node_WriteClient, error) {
	m.WriteCalled <- true
	m.WriteInput.Ctx <- ctx
	m.WriteInput.Opts <- opts
	return <-m.WriteOutput.Ret0, <-m.WriteOutput.Ret1
}
func (m *mockNodeClient) Read(ctx context.Context, in *talaria.BufferInfo, opts ...grpc.CallOption) (talaria.Node_ReadClient, error) {
	m.ReadCalled <- true
	m.ReadInput.Ctx <- ctx
	m.ReadInput.In <- in
	m.ReadInput.Opts <- opts
	return <-m.ReadOutput.Ret0, <-m.ReadOutput.Ret1
}
func (m *mockNodeClient) ListClusters(ctx context.Context, in *talaria.ListClustersInfo, opts ...grpc.CallOption) (*talaria.ListClustersResponse, error) {
	m.ListClustersCalled <- true
	m.ListClustersInput.Ctx <- ctx
	m.ListClustersInput.In <- in
	m.ListClustersInput.Opts <- opts
	return <-m.ListClustersOutput.Ret0, <-m.ListClustersOutput.Ret1
}

type mockNodeReadClient struct {
	RecvCalled chan bool
	RecvOutput struct {
		Ret0 chan *talaria.ReadDataPacket
		Ret1 chan error
	}
	HeaderCalled chan bool
	HeaderOutput struct {
		Ret0 chan metadata.MD
		Ret1 chan error
	}
	TrailerCalled chan bool
	TrailerOutput struct {
		Ret0 chan metadata.MD
	}
	CloseSendCalled chan bool
	CloseSendOutput struct {
		Ret0 chan error
	}
	ContextCalled chan bool
	ContextOutput struct {
		Ret0 chan context.Context
	}
	SendMsgCalled chan bool
	SendMsgInput  struct {
		M chan interface{}
	}
	SendMsgOutput struct {
		Ret0 chan error
	}
	RecvMsgCalled chan bool
	RecvMsgInput  struct {
		M chan interface{}
	}
	RecvMsgOutput struct {
		Ret0 chan error
	}
}

func newMockNodeReadClient() *mockNodeReadClient {
	m := &mockNodeReadClient{}
	m.RecvCalled = make(chan bool, 100)
	m.RecvOutput.Ret0 = make(chan *talaria.ReadDataPacket, 100)
	m.RecvOutput.Ret1 = make(chan error, 100)
	m.HeaderCalled = make(chan bool, 100)
	m.HeaderOutput.Ret0 = make(chan metadata.MD, 100)
	m.HeaderOutput.Ret1 = make(chan error, 100)
	m.TrailerCalled = make(chan bool, 100)
	m.TrailerOutput.Ret0 = make(chan metadata.MD, 100)
	m.CloseSendCalled = make(chan bool, 100)
	m.CloseSendOutput.Ret0 = make(chan error, 100)
	m.ContextCalled = make(chan bool, 100)
	m.ContextOutput.Ret0 = make(chan context.Context, 100)
	m.SendMsgCalled = make(chan bool, 100)
	m.SendMsgInput.M = make(chan interface{}, 100)
	m.SendMsgOutput.Ret0 = make(chan error, 100)
	m.RecvMsgCalled = make(chan bool, 100)
	m.RecvMsgInput.M = make(chan interface{}, 100)
	m.RecvMsgOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockNodeReadClient) Recv() (*talaria.ReadDataPacket, error) {
	m.RecvCalled <- true
	return <-m.RecvOutput.Ret0, <-m.RecvOutput.Ret1
}
func (m *mockNodeReadClient) Header() (metadata.MD, error) {
	m.HeaderCalled <- true
	return <-m.HeaderOutput.Ret0, <-m.HeaderOutput.Ret1
}
func (m *mockNodeReadClient) Trailer() metadata.MD {
	m.TrailerCalled <- true
	return <-m.TrailerOutput.Ret0
}
func (m *mockNodeReadClient) CloseSend() error {
	m.CloseSendCalled <- true
	return <-m.CloseSendOutput.Ret0
}
func (m *mockNodeReadClient) Context() context.Context {
	m.ContextCalled <- true
	return <-m.ContextOutput.Ret0
}
func (m *mockNodeReadClient) SendMsg(mm interface{}) error {
	m.SendMsgCalled <- true
	m.SendMsgInput.M <- mm
	return <-m.SendMsgOutput.Ret0
}
func (m *mockNodeReadClient) RecvMsg(mm interface{}) error {
	m.RecvMsgCalled <- true
	m.RecvMsgInput.M <- mm
	return <-m.RecvMsgOutput.Ret0
}

type mockFileFilter struct {
	FilterCalled chan bool
	FilterInput  struct {
		Route chan string
		Files chan map[string][]string
	}
}

func newMockFileFilter() *mockFileFilter {
	m := &mockFileFilter{}
	m.FilterCalled = make(chan bool, 100)
	m.FilterInput.Route = make(chan string, 100)
	m.FilterInput.Files = make(chan map[string][]string, 100)
	return m
}
func (m *mockFileFilter) Filter(route string, files map[string][]string) {
	m.FilterCalled <- true
	m.FilterInput.Route <- route
	m.FilterInput.Files <- files
}

type mockHasher struct {
	HashStringCalled chan bool
	HashStringInput  struct {
		S chan string
	}
	HashStringOutput struct {
		Hash chan uint64
	}
}

func newMockHasher() *mockHasher {
	m := &mockHasher{}
	m.HashStringCalled = make(chan bool, 100)
	m.HashStringInput.S = make(chan string, 100)
	m.HashStringOutput.Hash = make(chan uint64, 100)
	return m
}
func (m *mockHasher) HashString(s string) (hash uint64) {
	m.HashStringCalled <- true
	m.HashStringInput.S <- s
	return <-m.HashStringOutput.Hash
}
