// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package end2end_test

import (
	"github.com/poy/talaria/api/v1"
	"golang.org/x/net/context"
)

type mockSchedulerServer struct {
	CreateCalled chan bool
	CreateInput  struct {
		Arg0 chan context.Context
		Arg1 chan *talaria.CreateInfo
	}
	CreateOutput struct {
		Ret0 chan *talaria.CreateResponse
		Ret1 chan error
	}
	ListClusterInfoCalled chan bool
	ListClusterInfoInput  struct {
		Arg0 chan context.Context
		Arg1 chan *talaria.ListInfo
	}
	ListClusterInfoOutput struct {
		Ret0 chan *talaria.ListResponse
		Ret1 chan error
	}
}

func newMockSchedulerServer() *mockSchedulerServer {
	m := &mockSchedulerServer{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Arg0 = make(chan context.Context, 100)
	m.CreateInput.Arg1 = make(chan *talaria.CreateInfo, 100)
	m.CreateOutput.Ret0 = make(chan *talaria.CreateResponse, 100)
	m.CreateOutput.Ret1 = make(chan error, 100)
	m.ListClusterInfoCalled = make(chan bool, 100)
	m.ListClusterInfoInput.Arg0 = make(chan context.Context, 100)
	m.ListClusterInfoInput.Arg1 = make(chan *talaria.ListInfo, 100)
	m.ListClusterInfoOutput.Ret0 = make(chan *talaria.ListResponse, 100)
	m.ListClusterInfoOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockSchedulerServer) Create(arg0 context.Context, arg1 *talaria.CreateInfo) (*talaria.CreateResponse, error) {
	m.CreateCalled <- true
	m.CreateInput.Arg0 <- arg0
	m.CreateInput.Arg1 <- arg1
	return <-m.CreateOutput.Ret0, <-m.CreateOutput.Ret1
}
func (m *mockSchedulerServer) ListClusterInfo(arg0 context.Context, arg1 *talaria.ListInfo) (*talaria.ListResponse, error) {
	m.ListClusterInfoCalled <- true
	m.ListClusterInfoInput.Arg0 <- arg0
	m.ListClusterInfoInput.Arg1 <- arg1
	return <-m.ListClusterInfoOutput.Ret0, <-m.ListClusterInfoOutput.Ret1
}

type mockNodeServer struct {
	WriteCalled chan bool
	WriteInput  struct {
		Arg0 chan talaria.Node_WriteServer
	}
	WriteOutput struct {
		Ret0 chan error
	}
	ReadCalled chan bool
	ReadInput  struct {
		Arg0 chan *talaria.BufferInfo
		Arg1 chan talaria.Node_ReadServer
	}
	ReadOutput struct {
		Ret0 chan error
	}
	ListClustersCalled chan bool
	ListClustersInput  struct {
		Arg0 chan context.Context
		Arg1 chan *talaria.ListClustersInfo
	}
	ListClustersOutput struct {
		Ret0 chan *talaria.ListClustersResponse
		Ret1 chan error
	}
}

func newMockNodeServer() *mockNodeServer {
	m := &mockNodeServer{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Arg0 = make(chan talaria.Node_WriteServer, 100)
	m.WriteOutput.Ret0 = make(chan error, 100)
	m.ReadCalled = make(chan bool, 100)
	m.ReadInput.Arg0 = make(chan *talaria.BufferInfo, 100)
	m.ReadInput.Arg1 = make(chan talaria.Node_ReadServer, 100)
	m.ReadOutput.Ret0 = make(chan error, 100)
	m.ListClustersCalled = make(chan bool, 100)
	m.ListClustersInput.Arg0 = make(chan context.Context, 100)
	m.ListClustersInput.Arg1 = make(chan *talaria.ListClustersInfo, 100)
	m.ListClustersOutput.Ret0 = make(chan *talaria.ListClustersResponse, 100)
	m.ListClustersOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockNodeServer) Write(arg0 talaria.Node_WriteServer) error {
	m.WriteCalled <- true
	m.WriteInput.Arg0 <- arg0
	return <-m.WriteOutput.Ret0
}
func (m *mockNodeServer) Read(arg0 *talaria.BufferInfo, arg1 talaria.Node_ReadServer) error {
	m.ReadCalled <- true
	m.ReadInput.Arg0 <- arg0
	m.ReadInput.Arg1 <- arg1
	return <-m.ReadOutput.Ret0
}
func (m *mockNodeServer) ListClusters(arg0 context.Context, arg1 *talaria.ListClustersInfo) (*talaria.ListClustersResponse, error) {
	m.ListClustersCalled <- true
	m.ListClustersInput.Arg0 <- arg0
	m.ListClustersInput.Arg1 <- arg1
	return <-m.ListClustersOutput.Ret0, <-m.ListClustersOutput.Ret1
}
