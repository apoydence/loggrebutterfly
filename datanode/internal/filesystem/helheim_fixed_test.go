// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package filesystem_test

import (
	"github.com/apoydence/talaria/pb"
	"golang.org/x/net/context"
	"google.golang.org/grpc/metadata"
)

type mockNodeServer struct {
	WriteCalled chan bool
	WriteInput  struct {
		Arg0 chan pb.Node_WriteServer
	}
	WriteOutput struct {
		Ret0 chan error
	}
	ReadCalled chan bool
	ReadInput  struct {
		Arg0 chan *pb.BufferInfo
		Arg1 chan pb.Node_ReadServer
	}
	ReadOutput struct {
		Ret0 chan error
	}
	ListClustersCalled chan bool
	ListClustersInput  struct {
		Arg0 chan context.Context
		Arg1 chan *pb.ListClustersInfo
	}
	ListClustersOutput struct {
		Ret0 chan *pb.ListClustersResponse
		Ret1 chan error
	}
}

func newMockNodeServer() *mockNodeServer {
	m := &mockNodeServer{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Arg0 = make(chan pb.Node_WriteServer, 100)
	m.WriteOutput.Ret0 = make(chan error, 100)
	m.ReadCalled = make(chan bool, 100)
	m.ReadInput.Arg0 = make(chan *pb.BufferInfo, 100)
	m.ReadInput.Arg1 = make(chan pb.Node_ReadServer, 100)
	m.ReadOutput.Ret0 = make(chan error, 100)
	m.ListClustersCalled = make(chan bool, 100)
	m.ListClustersInput.Arg0 = make(chan context.Context, 100)
	m.ListClustersInput.Arg1 = make(chan *pb.ListClustersInfo, 100)
	m.ListClustersOutput.Ret0 = make(chan *pb.ListClustersResponse, 100)
	m.ListClustersOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockNodeServer) Write(arg0 pb.Node_WriteServer) error {
	m.WriteCalled <- true
	m.WriteInput.Arg0 <- arg0
	return <-m.WriteOutput.Ret0
}
func (m *mockNodeServer) Read(arg0 *pb.BufferInfo, arg1 pb.Node_ReadServer) error {
	m.ReadCalled <- true
	m.ReadInput.Arg0 <- arg0
	m.ReadInput.Arg1 <- arg1
	return <-m.ReadOutput.Ret0
}
func (m *mockNodeServer) ListClusters(arg0 context.Context, arg1 *pb.ListClustersInfo) (*pb.ListClustersResponse, error) {
	m.ListClustersCalled <- true
	m.ListClustersInput.Arg0 <- arg0
	m.ListClustersInput.Arg1 <- arg1
	return <-m.ListClustersOutput.Ret0, <-m.ListClustersOutput.Ret1
}

type mockNode_WriteServer struct {
	SendAndCloseCalled chan bool
	SendAndCloseInput  struct {
		Arg0 chan *pb.WriteResponse
	}
	SendAndCloseOutput struct {
		Ret0 chan error
	}
	RecvCalled chan bool
	RecvOutput struct {
		Ret0 chan *pb.WriteDataPacket
		Ret1 chan error
	}
	SetHeaderCalled chan bool
	SetHeaderInput  struct {
		Arg0 chan metadata.MD
	}
	SetHeaderOutput struct {
		Ret0 chan error
	}
	SendHeaderCalled chan bool
	SendHeaderInput  struct {
		Arg0 chan metadata.MD
	}
	SendHeaderOutput struct {
		Ret0 chan error
	}
	SetTrailerCalled chan bool
	SetTrailerInput  struct {
		Arg0 chan metadata.MD
	}
	ContextCalled chan bool
	ContextOutput struct {
		Ret0 chan context.Context
	}
	SendMsgCalled chan bool
	SendMsgInput  struct {
		M chan interface{}
	}
	SendMsgOutput struct {
		Ret0 chan error
	}
	RecvMsgCalled chan bool
	RecvMsgInput  struct {
		M chan interface{}
	}
	RecvMsgOutput struct {
		Ret0 chan error
	}
}

func newMockNode_WriteServer() *mockNode_WriteServer {
	m := &mockNode_WriteServer{}
	m.SendAndCloseCalled = make(chan bool, 100)
	m.SendAndCloseInput.Arg0 = make(chan *pb.WriteResponse, 100)
	m.SendAndCloseOutput.Ret0 = make(chan error, 100)
	m.RecvCalled = make(chan bool, 100)
	m.RecvOutput.Ret0 = make(chan *pb.WriteDataPacket, 100)
	m.RecvOutput.Ret1 = make(chan error, 100)
	m.SetHeaderCalled = make(chan bool, 100)
	m.SetHeaderInput.Arg0 = make(chan metadata.MD, 100)
	m.SetHeaderOutput.Ret0 = make(chan error, 100)
	m.SendHeaderCalled = make(chan bool, 100)
	m.SendHeaderInput.Arg0 = make(chan metadata.MD, 100)
	m.SendHeaderOutput.Ret0 = make(chan error, 100)
	m.SetTrailerCalled = make(chan bool, 100)
	m.SetTrailerInput.Arg0 = make(chan metadata.MD, 100)
	m.ContextCalled = make(chan bool, 100)
	m.ContextOutput.Ret0 = make(chan context.Context, 100)
	m.SendMsgCalled = make(chan bool, 100)
	m.SendMsgInput.M = make(chan interface{}, 100)
	m.SendMsgOutput.Ret0 = make(chan error, 100)
	m.RecvMsgCalled = make(chan bool, 100)
	m.RecvMsgInput.M = make(chan interface{}, 100)
	m.RecvMsgOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockNode_WriteServer) SendAndClose(arg0 *pb.WriteResponse) error {
	m.SendAndCloseCalled <- true
	m.SendAndCloseInput.Arg0 <- arg0
	return <-m.SendAndCloseOutput.Ret0
}
func (m *mockNode_WriteServer) Recv() (*pb.WriteDataPacket, error) {
	m.RecvCalled <- true
	return <-m.RecvOutput.Ret0, <-m.RecvOutput.Ret1
}
func (m *mockNode_WriteServer) SetHeader(arg0 metadata.MD) error {
	m.SetHeaderCalled <- true
	m.SetHeaderInput.Arg0 <- arg0
	return <-m.SetHeaderOutput.Ret0
}
func (m *mockNode_WriteServer) SendHeader(arg0 metadata.MD) error {
	m.SendHeaderCalled <- true
	m.SendHeaderInput.Arg0 <- arg0
	return <-m.SendHeaderOutput.Ret0
}
func (m *mockNode_WriteServer) SetTrailer(arg0 metadata.MD) {
	m.SetTrailerCalled <- true
	m.SetTrailerInput.Arg0 <- arg0
}
func (m *mockNode_WriteServer) Context() context.Context {
	m.ContextCalled <- true
	return <-m.ContextOutput.Ret0
}
func (m *mockNode_WriteServer) SendMsg(m_ interface{}) error {
	m.SendMsgCalled <- true
	m.SendMsgInput.M <- m_
	return <-m.SendMsgOutput.Ret0
}
func (m *mockNode_WriteServer) RecvMsg(m_ interface{}) error {
	m.RecvMsgCalled <- true
	m.RecvMsgInput.M <- m_
	return <-m.RecvMsgOutput.Ret0
}

type mockNode_ReadServer struct {
	SendCalled chan bool
	SendInput  struct {
		Arg0 chan *pb.ReadDataPacket
	}
	SendOutput struct {
		Ret0 chan error
	}
	SetHeaderCalled chan bool
	SetHeaderInput  struct {
		Arg0 chan metadata.MD
	}
	SetHeaderOutput struct {
		Ret0 chan error
	}
	SendHeaderCalled chan bool
	SendHeaderInput  struct {
		Arg0 chan metadata.MD
	}
	SendHeaderOutput struct {
		Ret0 chan error
	}
	SetTrailerCalled chan bool
	SetTrailerInput  struct {
		Arg0 chan metadata.MD
	}
	ContextCalled chan bool
	ContextOutput struct {
		Ret0 chan context.Context
	}
	SendMsgCalled chan bool
	SendMsgInput  struct {
		M chan interface{}
	}
	SendMsgOutput struct {
		Ret0 chan error
	}
	RecvMsgCalled chan bool
	RecvMsgInput  struct {
		M chan interface{}
	}
	RecvMsgOutput struct {
		Ret0 chan error
	}
}

func newMockNode_ReadServer() *mockNode_ReadServer {
	m := &mockNode_ReadServer{}
	m.SendCalled = make(chan bool, 100)
	m.SendInput.Arg0 = make(chan *pb.ReadDataPacket, 100)
	m.SendOutput.Ret0 = make(chan error, 100)
	m.SetHeaderCalled = make(chan bool, 100)
	m.SetHeaderInput.Arg0 = make(chan metadata.MD, 100)
	m.SetHeaderOutput.Ret0 = make(chan error, 100)
	m.SendHeaderCalled = make(chan bool, 100)
	m.SendHeaderInput.Arg0 = make(chan metadata.MD, 100)
	m.SendHeaderOutput.Ret0 = make(chan error, 100)
	m.SetTrailerCalled = make(chan bool, 100)
	m.SetTrailerInput.Arg0 = make(chan metadata.MD, 100)
	m.ContextCalled = make(chan bool, 100)
	m.ContextOutput.Ret0 = make(chan context.Context, 100)
	m.SendMsgCalled = make(chan bool, 100)
	m.SendMsgInput.M = make(chan interface{}, 100)
	m.SendMsgOutput.Ret0 = make(chan error, 100)
	m.RecvMsgCalled = make(chan bool, 100)
	m.RecvMsgInput.M = make(chan interface{}, 100)
	m.RecvMsgOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockNode_ReadServer) Send(arg0 *pb.ReadDataPacket) error {
	m.SendCalled <- true
	m.SendInput.Arg0 <- arg0
	return <-m.SendOutput.Ret0
}
func (m *mockNode_ReadServer) SetHeader(arg0 metadata.MD) error {
	m.SetHeaderCalled <- true
	m.SetHeaderInput.Arg0 <- arg0
	return <-m.SetHeaderOutput.Ret0
}
func (m *mockNode_ReadServer) SendHeader(arg0 metadata.MD) error {
	m.SendHeaderCalled <- true
	m.SendHeaderInput.Arg0 <- arg0
	return <-m.SendHeaderOutput.Ret0
}
func (m *mockNode_ReadServer) SetTrailer(arg0 metadata.MD) {
	m.SetTrailerCalled <- true
	m.SetTrailerInput.Arg0 <- arg0
}
func (m *mockNode_ReadServer) Context() context.Context {
	m.ContextCalled <- true
	return <-m.ContextOutput.Ret0
}
func (m *mockNode_ReadServer) SendMsg(m_ interface{}) error {
	m.SendMsgCalled <- true
	m.SendMsgInput.M <- m_
	return <-m.SendMsgOutput.Ret0
}
func (m *mockNode_ReadServer) RecvMsg(m_ interface{}) error {
	m.RecvMsgCalled <- true
	m.RecvMsgInput.M <- m_
	return <-m.RecvMsgOutput.Ret0
}
