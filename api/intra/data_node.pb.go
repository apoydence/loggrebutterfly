// Code generated by protoc-gen-go.
// source: data_node.proto
// DO NOT EDIT!

package intra

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReadMetricsInfo struct {
	File string `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *ReadMetricsInfo) Reset()                    { *m = ReadMetricsInfo{} }
func (m *ReadMetricsInfo) String() string            { return proto.CompactTextString(m) }
func (*ReadMetricsInfo) ProtoMessage()               {}
func (*ReadMetricsInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReadMetricsInfo) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type ReadMetricsResponse struct {
	WriteCount uint64 `protobuf:"varint,1,opt,name=writeCount" json:"writeCount,omitempty"`
	ErrCount   uint64 `protobuf:"varint,2,opt,name=errCount" json:"errCount,omitempty"`
}

func (m *ReadMetricsResponse) Reset()                    { *m = ReadMetricsResponse{} }
func (m *ReadMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadMetricsResponse) ProtoMessage()               {}
func (*ReadMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ReadMetricsResponse) GetWriteCount() uint64 {
	if m != nil {
		return m.WriteCount
	}
	return 0
}

func (m *ReadMetricsResponse) GetErrCount() uint64 {
	if m != nil {
		return m.ErrCount
	}
	return 0
}

func init() {
	proto.RegisterType((*ReadMetricsInfo)(nil), "intra.ReadMetricsInfo")
	proto.RegisterType((*ReadMetricsResponse)(nil), "intra.ReadMetricsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataNode service

type DataNodeClient interface {
	ReadMetrics(ctx context.Context, in *ReadMetricsInfo, opts ...grpc.CallOption) (*ReadMetricsResponse, error)
}

type dataNodeClient struct {
	cc *grpc.ClientConn
}

func NewDataNodeClient(cc *grpc.ClientConn) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) ReadMetrics(ctx context.Context, in *ReadMetricsInfo, opts ...grpc.CallOption) (*ReadMetricsResponse, error) {
	out := new(ReadMetricsResponse)
	err := grpc.Invoke(ctx, "/intra.DataNode/ReadMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataNode service

type DataNodeServer interface {
	ReadMetrics(context.Context, *ReadMetricsInfo) (*ReadMetricsResponse, error)
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_ReadMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMetricsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ReadMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.DataNode/ReadMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ReadMetrics(ctx, req.(*ReadMetricsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intra.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadMetrics",
			Handler:    _DataNode_ReadMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_node.proto",
}

func init() { proto.RegisterFile("data_node.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x49, 0x2c, 0x49,
	0x8c, 0xcf, 0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcc, 0x2b,
	0x29, 0x4a, 0x54, 0x52, 0xe5, 0xe2, 0x0f, 0x4a, 0x4d, 0x4c, 0xf1, 0x4d, 0x2d, 0x29, 0xca, 0x4c,
	0x2e, 0xf6, 0xcc, 0x4b, 0xcb, 0x17, 0x12, 0xe2, 0x62, 0x49, 0xcb, 0xcc, 0x49, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x02, 0xb9, 0x84, 0x91, 0x94, 0x05, 0xa5, 0x16, 0x17,
	0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xc9, 0x71, 0x71, 0x95, 0x17, 0x65, 0x96, 0xa4, 0x3a, 0xe7, 0x97,
	0xe6, 0x95, 0x80, 0x35, 0xb0, 0x04, 0x21, 0x89, 0x08, 0x49, 0x71, 0x71, 0xa4, 0x16, 0x15, 0x41,
	0x64, 0x99, 0xc0, 0xb2, 0x70, 0xbe, 0x91, 0x3f, 0x17, 0x87, 0x4b, 0x62, 0x49, 0xa2, 0x5f, 0x7e,
	0x4a, 0xaa, 0x90, 0x33, 0x17, 0x37, 0x92, 0xf1, 0x42, 0x62, 0x7a, 0x60, 0xc7, 0xe9, 0xa1, 0xb9,
	0x4c, 0x4a, 0x0a, 0x53, 0x1c, 0xe6, 0x14, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xc7, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x35, 0x50, 0x7b, 0x42, 0xeb, 0x00, 0x00, 0x00,
}
