// Code generated by protoc-gen-go.
// source: data_node.proto
// DO NOT EDIT!

package loggrebutterfly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WriteInfo struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *WriteInfo) Reset()                    { *m = WriteInfo{} }
func (m *WriteInfo) String() string            { return proto.CompactTextString(m) }
func (*WriteInfo) ProtoMessage()               {}
func (*WriteInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *WriteInfo) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ReadInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *ReadInfo) Reset()                    { *m = ReadInfo{} }
func (m *ReadInfo) String() string            { return proto.CompactTextString(m) }
func (*ReadInfo) ProtoMessage()               {}
func (*ReadInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ReadInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadInfo) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReadData struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
	File    string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Index   uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *ReadData) Reset()                    { *m = ReadData{} }
func (m *ReadData) String() string            { return proto.CompactTextString(m) }
func (*ReadData) ProtoMessage()               {}
func (*ReadData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ReadData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ReadData) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *ReadData) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*WriteInfo)(nil), "loggrebutterfly.WriteInfo")
	proto.RegisterType((*WriteResponse)(nil), "loggrebutterfly.WriteResponse")
	proto.RegisterType((*ReadInfo)(nil), "loggrebutterfly.ReadInfo")
	proto.RegisterType((*ReadData)(nil), "loggrebutterfly.ReadData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataNode service

type DataNodeClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (DataNode_WriteClient, error)
	Read(ctx context.Context, in *ReadInfo, opts ...grpc.CallOption) (DataNode_ReadClient, error)
}

type dataNodeClient struct {
	cc *grpc.ClientConn
}

func NewDataNodeClient(cc *grpc.ClientConn) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) Write(ctx context.Context, opts ...grpc.CallOption) (DataNode_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataNode_serviceDesc.Streams[0], c.cc, "/loggrebutterfly.DataNode/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeWriteClient{stream}
	return x, nil
}

type DataNode_WriteClient interface {
	Send(*WriteInfo) error
	CloseAndRecv() (*WriteResponse, error)
	grpc.ClientStream
}

type dataNodeWriteClient struct {
	grpc.ClientStream
}

func (x *dataNodeWriteClient) Send(m *WriteInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeWriteClient) CloseAndRecv() (*WriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeClient) Read(ctx context.Context, in *ReadInfo, opts ...grpc.CallOption) (DataNode_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataNode_serviceDesc.Streams[1], c.cc, "/loggrebutterfly.DataNode/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNode_ReadClient interface {
	Recv() (*ReadData, error)
	grpc.ClientStream
}

type dataNodeReadClient struct {
	grpc.ClientStream
}

func (x *dataNodeReadClient) Recv() (*ReadData, error) {
	m := new(ReadData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DataNode service

type DataNodeServer interface {
	Write(DataNode_WriteServer) error
	Read(*ReadInfo, DataNode_ReadServer) error
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServer).Write(&dataNodeWriteServer{stream})
}

type DataNode_WriteServer interface {
	SendAndClose(*WriteResponse) error
	Recv() (*WriteInfo, error)
	grpc.ServerStream
}

type dataNodeWriteServer struct {
	grpc.ServerStream
}

func (x *dataNodeWriteServer) SendAndClose(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeWriteServer) Recv() (*WriteInfo, error) {
	m := new(WriteInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNode_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServer).Read(m, &dataNodeReadServer{stream})
}

type DataNode_ReadServer interface {
	Send(*ReadData) error
	grpc.ServerStream
}

type dataNodeReadServer struct {
	grpc.ServerStream
}

func (x *dataNodeReadServer) Send(m *ReadData) error {
	return x.ServerStream.SendMsg(m)
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loggrebutterfly.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _DataNode_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _DataNode_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data_node.proto",
}

func init() { proto.RegisterFile("data_node.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x49, 0x2c, 0x49,
	0x8c, 0xcf, 0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcf, 0xc9, 0x4f,
	0x4f, 0x2f, 0x4a, 0x4d, 0x2a, 0x2d, 0x29, 0x49, 0x2d, 0x4a, 0xcb, 0xa9, 0x54, 0x52, 0xe5, 0xe2,
	0x0c, 0x2f, 0xca, 0x2c, 0x49, 0xf5, 0xcc, 0x4b, 0xcb, 0x17, 0x92, 0xe0, 0x62, 0x0f, 0x48, 0xac,
	0xcc, 0xc9, 0x4f, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x62, 0x2f, 0x80, 0x70, 0x95,
	0xf8, 0xb9, 0x78, 0xc1, 0xca, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x4c, 0xb8,
	0x38, 0x82, 0x52, 0x13, 0x53, 0xc0, 0xda, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0xc1, 0x7a,
	0x38, 0x83, 0xc0, 0x6c, 0x21, 0x11, 0x2e, 0xd6, 0xcc, 0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x26, 0x05,
	0x46, 0x0d, 0x96, 0x20, 0x08, 0x47, 0xc9, 0x0f, 0xa2, 0xcb, 0x25, 0xb1, 0x24, 0x11, 0xb7, 0x65,
	0x20, 0xf3, 0xd2, 0x32, 0x73, 0x52, 0xc1, 0x5a, 0x39, 0x83, 0xc0, 0x6c, 0x84, 0x79, 0xcc, 0x48,
	0xe6, 0x19, 0x4d, 0x65, 0xe4, 0xe2, 0x00, 0x19, 0xe6, 0x97, 0x9f, 0x92, 0x2a, 0xe4, 0xce, 0xc5,
	0x0a, 0x76, 0xa3, 0x90, 0x94, 0x1e, 0x9a, 0x2f, 0xf5, 0xe0, 0x5e, 0x94, 0x92, 0xc3, 0x2e, 0x07,
	0xf7, 0x17, 0x83, 0x06, 0xa3, 0x90, 0x03, 0x17, 0x0b, 0xc8, 0x95, 0x42, 0x92, 0x18, 0x6a, 0x61,
	0x5e, 0x96, 0xc2, 0x2e, 0x05, 0x72, 0x8a, 0x12, 0x83, 0x01, 0x63, 0x12, 0x1b, 0x38, 0xb4, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x83, 0xd0, 0x7d, 0x80, 0x01, 0x00, 0x00,
}
